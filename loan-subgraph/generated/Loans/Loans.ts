// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class LoanPaid extends ethereum.Event {
  get params(): LoanPaid__Params {
    return new LoanPaid__Params(this);
  }
}

export class LoanPaid__Params {
  _event: LoanPaid;

  constructor(event: LoanPaid) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amountPaid(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get remainingAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Loans extends ethereum.SmartContract {
  static bind(address: Address): Loans {
    return new Loans("Loans", address);
  }

  ADDRESSES_PROVIDER(): Address {
    let result = super.call(
      "ADDRESSES_PROVIDER",
      "ADDRESSES_PROVIDER():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_ADDRESSES_PROVIDER(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "ADDRESSES_PROVIDER",
      "ADDRESSES_PROVIDER():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  GHO_TOKEN(): Address {
    let result = super.call("GHO_TOKEN", "GHO_TOKEN():(address)", []);

    return result[0].toAddress();
  }

  try_GHO_TOKEN(): ethereum.CallResult<Address> {
    let result = super.tryCall("GHO_TOKEN", "GHO_TOKEN():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  NFTId(): BigInt {
    let result = super.call("NFTId", "NFTId():(uint256)", []);

    return result[0].toBigInt();
  }

  try_NFTId(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("NFTId", "NFTId():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  POOL(): Address {
    let result = super.call("POOL", "POOL():(address)", []);

    return result[0].toAddress();
  }

  try_POOL(): ethereum.CallResult<Address> {
    let result = super.tryCall("POOL", "POOL():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  approvedai(): boolean {
    let result = super.call("approvedai", "approvedai():(bool)", []);

    return result[0].toBoolean();
  }

  try_approvedai(): ethereum.CallResult<boolean> {
    let result = super.tryCall("approvedai", "approvedai():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  borrower(): Address {
    let result = super.call("borrower", "borrower():(address)", []);

    return result[0].toAddress();
  }

  try_borrower(): ethereum.CallResult<Address> {
    let result = super.tryCall("borrower", "borrower():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collateralNFT(): Address {
    let result = super.call("collateralNFT", "collateralNFT():(address)", []);

    return result[0].toAddress();
  }

  try_collateralNFT(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collateralNFT",
      "collateralNFT():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  interestRate(): BigInt {
    let result = super.call("interestRate", "interestRate():(uint256)", []);

    return result[0].toBigInt();
  }

  try_interestRate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("interestRate", "interestRate():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  lender(): Address {
    let result = super.call("lender", "lender():(address)", []);

    return result[0].toAddress();
  }

  try_lender(): ethereum.CallResult<Address> {
    let result = super.tryCall("lender", "lender():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  loanAmount(): BigInt {
    let result = super.call("loanAmount", "loanAmount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_loanAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("loanAmount", "loanAmount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loanExpiration(): BigInt {
    let result = super.call("loanExpiration", "loanExpiration():(uint256)", []);

    return result[0].toBigInt();
  }

  try_loanExpiration(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "loanExpiration",
      "loanExpiration():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  loanManager(): Address {
    let result = super.call("loanManager", "loanManager():(address)", []);

    return result[0].toAddress();
  }

  try_loanManager(): ethereum.CallResult<Address> {
    let result = super.tryCall("loanManager", "loanManager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paidInstallments(param0: Address): BigInt {
    let result = super.call(
      "paidInstallments",
      "paidInstallments(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBigInt();
  }

  try_paidInstallments(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "paidInstallments",
      "paidInstallments(address):(uint256)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  remainingAmount(): BigInt {
    let result = super.call(
      "remainingAmount",
      "remainingAmount():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_remainingAmount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "remainingAmount",
      "remainingAmount():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  sGho(): Address {
    let result = super.call("sGho", "sGho():(address)", []);

    return result[0].toAddress();
  }

  try_sGho(): ethereum.CallResult<Address> {
    let result = super.tryCall("sGho", "sGho():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _loanManager(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _loanAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _interestRate(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get _nft(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _nftid(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _loanExpiration(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApprovedaiCall extends ethereum.Call {
  get inputs(): ApprovedaiCall__Inputs {
    return new ApprovedaiCall__Inputs(this);
  }

  get outputs(): ApprovedaiCall__Outputs {
    return new ApprovedaiCall__Outputs(this);
  }
}

export class ApprovedaiCall__Inputs {
  _call: ApprovedaiCall;

  constructor(call: ApprovedaiCall) {
    this._call = call;
  }
}

export class ApprovedaiCall__Outputs {
  _call: ApprovedaiCall;

  constructor(call: ApprovedaiCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class CheckAndTransferCollateralCall extends ethereum.Call {
  get inputs(): CheckAndTransferCollateralCall__Inputs {
    return new CheckAndTransferCollateralCall__Inputs(this);
  }

  get outputs(): CheckAndTransferCollateralCall__Outputs {
    return new CheckAndTransferCollateralCall__Outputs(this);
  }
}

export class CheckAndTransferCollateralCall__Inputs {
  _call: CheckAndTransferCollateralCall;

  constructor(call: CheckAndTransferCollateralCall) {
    this._call = call;
  }
}

export class CheckAndTransferCollateralCall__Outputs {
  _call: CheckAndTransferCollateralCall;

  constructor(call: CheckAndTransferCollateralCall) {
    this._call = call;
  }
}

export class LendLoanCall extends ethereum.Call {
  get inputs(): LendLoanCall__Inputs {
    return new LendLoanCall__Inputs(this);
  }

  get outputs(): LendLoanCall__Outputs {
    return new LendLoanCall__Outputs(this);
  }
}

export class LendLoanCall__Inputs {
  _call: LendLoanCall;

  constructor(call: LendLoanCall) {
    this._call = call;
  }

  get _lender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class LendLoanCall__Outputs {
  _call: LendLoanCall;

  constructor(call: LendLoanCall) {
    this._call = call;
  }
}

export class MakePaymentCall extends ethereum.Call {
  get inputs(): MakePaymentCall__Inputs {
    return new MakePaymentCall__Inputs(this);
  }

  get outputs(): MakePaymentCall__Outputs {
    return new MakePaymentCall__Outputs(this);
  }
}

export class MakePaymentCall__Inputs {
  _call: MakePaymentCall;

  constructor(call: MakePaymentCall) {
    this._call = call;
  }

  get _lender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MakePaymentCall__Outputs {
  _call: MakePaymentCall;

  constructor(call: MakePaymentCall) {
    this._call = call;
  }
}
