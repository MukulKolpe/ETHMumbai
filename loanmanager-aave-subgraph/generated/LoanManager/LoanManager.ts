// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class ActiveLoansSet extends ethereum.Event {
  get params(): ActiveLoansSet__Params {
    return new ActiveLoansSet__Params(this);
  }
}

export class ActiveLoansSet__Params {
  _event: ActiveLoansSet;

  constructor(event: ActiveLoansSet) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get status(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class LoanCreated extends ethereum.Event {
  get params(): LoanCreated__Params {
    return new LoanCreated__Params(this);
  }
}

export class LoanCreated__Params {
  _event: LoanCreated;

  constructor(event: LoanCreated) {
    this._event = event;
  }

  get borrower(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get loanContract(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class LoanManager extends ethereum.SmartContract {
  static bind(address: Address): LoanManager {
    return new LoanManager("LoanManager", address);
  }

  activeLoans(param0: Address): boolean {
    let result = super.call("activeLoans", "activeLoans(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBoolean();
  }

  try_activeLoans(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("activeLoans", "activeLoans(address):(bool)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allLoans(param0: BigInt): Address {
    let result = super.call("allLoans", "allLoans(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);

    return result[0].toAddress();
  }

  try_allLoans(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allLoans", "allLoans(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  borrowerLoans(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "borrowerLoans",
      "borrowerLoans(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );

    return result[0].toAddress();
  }

  try_borrowerLoans(
    param0: Address,
    param1: BigInt,
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "borrowerLoans",
      "borrowerLoans(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAllLoansLength(): BigInt {
    let result = super.call(
      "getAllLoansLength",
      "getAllLoansLength():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_getAllLoansLength(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAllLoansLength",
      "getAllLoansLength():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBorrowerLoans(): Array<Address> {
    let result = super.call(
      "getBorrowerLoans",
      "getBorrowerLoans():(address[])",
      [],
    );

    return result[0].toAddressArray();
  }

  try_getBorrowerLoans(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getBorrowerLoans",
      "getBorrowerLoans():(address[])",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateLoanCall extends ethereum.Call {
  get inputs(): CreateLoanCall__Inputs {
    return new CreateLoanCall__Inputs(this);
  }

  get outputs(): CreateLoanCall__Outputs {
    return new CreateLoanCall__Outputs(this);
  }
}

export class CreateLoanCall__Inputs {
  _call: CreateLoanCall;

  constructor(call: CreateLoanCall) {
    this._call = call;
  }

  get loanAmount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get interestRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _nft(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _nftid(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get loanExpiration(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class CreateLoanCall__Outputs {
  _call: CreateLoanCall;

  constructor(call: CreateLoanCall) {
    this._call = call;
  }
}

export class SetActiveLoansCall extends ethereum.Call {
  get inputs(): SetActiveLoansCall__Inputs {
    return new SetActiveLoansCall__Inputs(this);
  }

  get outputs(): SetActiveLoansCall__Outputs {
    return new SetActiveLoansCall__Outputs(this);
  }
}

export class SetActiveLoansCall__Inputs {
  _call: SetActiveLoansCall;

  constructor(call: SetActiveLoansCall) {
    this._call = call;
  }

  get borrower(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get status(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetActiveLoansCall__Outputs {
  _call: SetActiveLoansCall;

  constructor(call: SetActiveLoansCall) {
    this._call = call;
  }
}
